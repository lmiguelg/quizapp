{"version":3,"sources":["views/Hero.js","views/Question.js","views/EndGameScreen.js","views/ProgressBar.js","views/Turn.js","views/StartQuiz.js","AuthorQuiz.js","config/config.js","App.js","serviceWorker.js","index.js"],"names":["Hero","className","Question","item","onAnswerSelected","useState","answers","setAnswers","setUserAnswered","useEffect","randPosition","Math","floor","random","incorrect_answers","length","splice","correct_answer","answersObj","forEach","answer","isCorrect","push","category","difficulty","dangerouslySetInnerHTML","__html","question","map","index","key","onClick","EndGameScreen","score","role","to","ProgressBar","width","style","aria-valuenow","aria-valuemin","aria-valuemax","Turn","items","setScore","questionIndex","setQuestionIndex","correctAnswer","StartQuiz","props","AuthorQuiz","state","this","setState","fetch","then","res","json","data","results","catch","console","log","basename","process","exact","path","component","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c41de448.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Hero = () => {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"jumbotron col-10 offset-1 text-center\">\r\n                <h1>Quiz app</h1>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Hero;","import React,{ useEffect, useState } from 'react';\r\n\r\nconst Question = ({item, onAnswerSelected}) => {\r\n    const [answers, setAnswers] = useState([]);\r\n    const [userAnswered, setUserAnswered] = useState(false);\r\n \r\n\r\n    useEffect(() => {\r\n        let randPosition = Math.floor(Math.random() * (item.incorrect_answers.length+1) );\r\n        let answers = item.incorrect_answers;\r\n        answers.splice(randPosition,0,item.correct_answer);\r\n        let answersObj = [];\r\n        answers.forEach(answer => {\r\n            let item = \"\";\r\n            if(answer === item.correct_answer)\r\n                item = {answer: answer, isCorrect: true}\r\n            else \r\n                item = {answer: answer, isCorrect: false}\r\n\r\n            answersObj.push(item);\r\n        });\r\n        setAnswers(answersObj);\r\n\r\n    }, [item]);\r\n\r\n    if(userAnswered){\r\n\r\n    }\r\n    else{\r\n\r\n    }\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <span className=\"badge badge-pill badge-primary\">{item.category}</span>\r\n                {item.difficulty === 'easy' ?<span className=\"badge badge-pill badge-success ml-2\">{item.difficulty}</span>:null}\r\n                {item.difficulty === 'medium' ?<span className=\"badge badge-pill badge-warning ml-2\">{item.difficulty}</span>:null}\r\n                {item.difficulty === 'hard' ?<span className=\"badge badge-pill badge-danger ml-2\">{item.difficulty}</span>:null}\r\n                    \r\n                <h5 dangerouslySetInnerHTML={{__html: item.question}}></h5>\r\n                <ul className=\"list-group\">\r\n                    {answers.map((answer, index) => <li \r\n                        key={index} \r\n                        className=\"list-group-item list-group-item-action\"\r\n                        dangerouslySetInnerHTML={{__html: answer.answer}} \r\n                        onClick={()=>{ \r\n                            onAnswerSelected(answer.answer,item.correct_answer);\r\n                            setUserAnswered(true);\r\n                  \r\n                    }}></li>)}\r\n                </ul>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Question;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nfunction EndGameScreen({score}) {\r\n    return (\r\n        <div className=\"alert alert-primary\" role=\"alert\">\r\n            <h4 className=\"alert-heading\">Well done! Quiz complete</h4>\r\n            <hr/>\r\n            <p className=\"mb-0\">Score: {score}</p>\r\n            <Link to=\"/\" className=\"btn btn-primary\">Play Again</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndGameScreen;","import React from 'react';\r\n\r\nfunction ProgressBar({width}) {\r\n    return (\r\n        <div className=\"progress\">\r\n            <div className=\"progress-bar\" role=\"progressbar\" style={{width: width+\"%\"}} aria-valuenow=\"25\" aria-valuemin=\"0\" aria-valuemax=\"100\">{width +\"%\"}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState } from 'react';\r\nimport Question from './Question'\r\nimport EndGameScreen from './EndGameScreen'\r\nimport ProgressBar from './ProgressBar'\r\n\r\nconst Turn = ({ items }) => {\r\n\r\n    const [score, setScore] = useState(0);\r\n    const [questionIndex, setQuestionIndex] = useState(0);\r\n\r\n    const onAnswerSelected = (answer, correctAnswer) =>{\r\n        let isCorrect = false;\r\n        if( answer === correctAnswer){\r\n            isCorrect = true;\r\n            setScore(score + 10);\r\n        }\r\n        if(questionIndex < 5) setQuestionIndex(questionIndex + 1);\r\n\r\n        return isCorrect;\r\n    }\r\n    \r\n    if(items === null) return <div></div>\r\n    else{\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"jumbotron col-10 offset-1 mt-2\">\r\n                    <div className=\"col-2  offset-9\">\r\n                        <h4>Score: <span className=\"badge badge-secondary\">{score}</span></h4>\r\n                    </div>\r\n                    <div>\r\n                        {questionIndex === 5 ? <EndGameScreen score={score}/>:<Question item={items[questionIndex]} onAnswerSelected={onAnswerSelected}/>}\r\n                        \r\n                    </div>\r\n                    \r\n                </div>\r\n                {questionIndex !== 5 ? \r\n                    <div className=\"col-10 offset-1\">\r\n                        <ProgressBar width={questionIndex*20}/>\r\n                    </div>:null}\r\n                \r\n            </div>\r\n            \r\n        );\r\n    }\r\n};\r\n\r\nexport default Turn;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction StartQuiz(props) {\r\n    return (\r\n        <div className=\"row mt-4\">\r\n            <div className=\"jumbotron col-10 offset-1\">\r\n                <h1 className=\"text-center\">Welcome</h1>\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <Link to=\"/quiz\" className=\"btn btn-primary\">Let's start!</Link>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StartQuiz;","import React,{Component} from 'react'\r\nimport Hero from './views/Hero'\r\nimport Turn from './views/Turn'\r\nimport StartQuiz from './views/StartQuiz'\r\nimport {APIURL} from './config/config'\r\nimport { Route, BrowserRouter, Switch } from 'react-router-dom'\r\n\r\n\r\nclass AuthorQuiz extends Component {\r\n    state={\r\n        items: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ items: null })\r\n        fetch(APIURL)\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n          this.setState({ items: data.results })\r\n        })\r\n        .catch(console.log)\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"container\">\r\n                <Hero/>\r\n                <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={StartQuiz}/>\r\n                 \r\n                        <Route path=\"/quiz\">\r\n                            <Turn {...this.state}/>   \r\n                        </Route>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n                \r\n                \r\n               \r\n            </div>\r\n            \r\n         );\r\n    }\r\n}\r\n \r\nexport default AuthorQuiz;","export const APIURL = \"https://opentdb.com/api.php?amount=5\"; ","import React from 'react';\nimport AuthorQuiz from './AuthorQuiz'\nimport './bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AuthorQuiz/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}